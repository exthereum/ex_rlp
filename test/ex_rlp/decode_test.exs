defmodule ExRLP.DecodeTest do
  use ExUnit.Case
  alias ExRLP.Decode
  import ExRLP.TestUtils

  describe "decode/2" do
    test "correctly decodes objects" do
      test_file_name = "rlptest.json"

      test_file_name
      |> read_json_file
      |> Enum.each(fn {test_name, %{"in" => expected_result, "out" => input}} ->
        expected_result = normalize_data(expected_result)

        result =
          input
          |> Decode.decode(encoding: :hex)
          |> normalize_decoded_data(expected_result)

        assert result == expected_result,
               "Test for #{test_name} failed, expected #{result} to equal to #{expected_result}"
      end)
    end

    test "decodes long list" do
      rlp_bin =
        <<248, 167, 184, 65, 41, 156, 166, 172, 253, 53, 227, 215, 45, 139, 163, 209, 226, 182,
          11, 85, 97, 213, 175, 82, 24, 235, 91, 193, 130, 4, 87, 105, 235, 66, 38, 145, 10, 48,
          26, 202, 227, 179, 105, 255, 252, 74, 72, 153, 214, 176, 37, 49, 232, 159, 212, 254, 54,
          162, 207, 13, 147, 96, 123, 164, 112, 181, 15, 120, 0, 184, 64, 253, 161, 207, 246, 116,
          201, 12, 154, 25, 117, 57, 254, 61, 251, 83, 8, 106, 206, 100, 248, 62, 215, 198, 234,
          190, 199, 65, 247, 243, 129, 204, 128, 62, 82, 171, 44, 213, 93, 85, 105, 188, 228, 52,
          113, 7, 163, 16, 223, 213, 248, 138, 1, 12, 210, 255, 209, 0, 92, 164, 6, 241, 132, 40,
          119, 160, 126, 150, 139, 186, 19, 182, 197, 14, 44, 76, 215, 242, 65, 204, 13, 100, 209,
          172, 37, 199, 245, 149, 45, 242, 49, 172, 106, 43, 218, 142, 229, 214, 4, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0>>

      expected_result = [
        <<41, 156, 166, 172, 253, 53, 227, 215, 45, 139, 163, 209, 226, 182, 11, 85, 97, 213, 175,
          82, 24, 235, 91, 193, 130, 4, 87, 105, 235, 66, 38, 145, 10, 48, 26, 202, 227, 179, 105,
          255, 252, 74, 72, 153, 214, 176, 37, 49, 232, 159, 212, 254, 54, 162, 207, 13, 147, 96,
          123, 164, 112, 181, 15, 120, 0>>,
        <<253, 161, 207, 246, 116, 201, 12, 154, 25, 117, 57, 254, 61, 251, 83, 8, 106, 206, 100,
          248, 62, 215, 198, 234, 190, 199, 65, 247, 243, 129, 204, 128, 62, 82, 171, 44, 213, 93,
          85, 105, 188, 228, 52, 113, 7, 163, 16, 223, 213, 248, 138, 1, 12, 210, 255, 209, 0, 92,
          164, 6, 241, 132, 40, 119>>,
        <<126, 150, 139, 186, 19, 182, 197, 14, 44, 76, 215, 242, 65, 204, 13, 100, 209, 172, 37,
          199, 245, 149, 45, 242, 49, 172, 106, 43, 218, 142, 229, 214>>,
        <<4>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>,
        <<0>>
      ]

      result = Decode.decode(rlp_bin)

      assert result == expected_result
    end

    test "decodes nested lists" do
      expected_result =
        [["key1", "val1"], ["key2", "val2"], ["key3", "val3"], ["key4", "val4"]]
        |> normalize_data

      input =
        "ecca846b6579318476616c31ca846b6579328476616c32ca846b6579338476616c33ca846b6579348476616c34"

      result =
        input
        |> Decode.decode(encoding: :hex)
        |> normalize_decoded_data(expected_result)

      assert result == expected_result
    end
  end
end
